{"version":3,"file":"nivo-legends.es.js","sources":["../src/svg/symbols/SymbolCircle.tsx","../src/svg/symbols/SymbolDiamond.tsx","../src/svg/symbols/SymbolSquare.tsx","../src/svg/symbols/SymbolTriangle.tsx","../src/compute.ts","../src/svg/LegendSvgItem.tsx","../src/svg/LegendSvg.tsx","../src/svg/BoxLegendSvg.tsx","../src/canvas.ts","../src/hooks.ts","../src/props.ts"],"sourcesContent":["import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { BoxLegendSvgProps, LegendAnchor, LegendItemDirection } from './types'\n\nconst isObject = <T>(item: unknown): item is T =>\n    typeof item === 'object' && !Array.isArray(item) && item !== null\n\nconst zeroPadding = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n}\n\nexport const computeDimensions = ({\n    direction,\n    itemsSpacing,\n    padding: _padding,\n    itemCount,\n    itemWidth,\n    itemHeight,\n}: Pick<BoxLegendSvgProps, 'direction' | 'padding'> &\n    Record<'itemsSpacing' | 'itemCount' | 'itemWidth' | 'itemHeight', number>) => {\n    if (typeof _padding !== 'number' && !isObject(_padding)) {\n        throw new Error('Invalid property padding, must be one of: number, object')\n    }\n\n    const padding =\n        typeof _padding === 'number'\n            ? {\n                  top: _padding,\n                  right: _padding,\n                  bottom: _padding,\n                  left: _padding,\n              }\n            : {\n                  ...zeroPadding,\n                  ..._padding,\n              }\n\n    const horizontalPadding = padding.left + padding.right\n    const verticalPadding = padding.top + padding.bottom\n    let width = itemWidth + horizontalPadding\n    let height = itemHeight + verticalPadding\n    const spacing = (itemCount - 1) * itemsSpacing\n    if (direction === 'row') {\n        width = itemWidth * itemCount + spacing + horizontalPadding\n    } else if (direction === 'column') {\n        height = itemHeight * itemCount + spacing + verticalPadding\n    }\n\n    return { width, height, padding }\n}\n\nexport const computePositionFromAnchor = ({\n    anchor,\n    translateX,\n    translateY,\n    containerWidth,\n    containerHeight,\n    width,\n    height,\n}: { anchor: LegendAnchor } & Record<\n    'translateX' | 'translateY' | 'containerWidth' | 'containerHeight' | 'width' | 'height',\n    number\n>) => {\n    let x = translateX\n    let y = translateY\n\n    switch (anchor) {\n        case 'top':\n            x += (containerWidth - width) / 2\n            break\n\n        case 'top-right':\n            x += containerWidth - width\n            break\n\n        case 'right':\n            x += containerWidth - width\n            y += (containerHeight - height) / 2\n            break\n\n        case 'bottom-right':\n            x += containerWidth - width\n            y += containerHeight - height\n            break\n\n        case 'bottom':\n            x += (containerWidth - width) / 2\n            y += containerHeight - height\n            break\n\n        case 'bottom-left':\n            y += containerHeight - height\n            break\n\n        case 'left':\n            y += (containerHeight - height) / 2\n            break\n\n        case 'center':\n            x += (containerWidth - width) / 2\n            y += (containerHeight - height) / 2\n            break\n    }\n\n    return { x, y }\n}\n\nexport const computeItemLayout = ({\n    direction,\n    justify,\n    symbolSize,\n    symbolSpacing,\n    width,\n    height,\n}: {\n    direction: LegendItemDirection\n    justify: boolean\n} & Record<'symbolSize' | 'symbolSpacing' | 'width' | 'height', number>) => {\n    let symbolX\n    let symbolY\n\n    let labelX\n    let labelY\n    let labelAnchor: 'start' | 'middle' | 'end'\n    let labelAlignment: 'alphabetic' | 'central' | 'text-before-edge'\n\n    switch (direction) {\n        case 'left-to-right':\n            symbolX = 0\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify === true) {\n                labelX = width\n                labelAnchor = 'end'\n            } else {\n                labelX = symbolSize + symbolSpacing\n                labelAnchor = 'start'\n            }\n            break\n\n        case 'right-to-left':\n            symbolX = width - symbolSize\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify === true) {\n                labelX = 0\n                labelAnchor = 'start'\n            } else {\n                labelX = width - symbolSize - symbolSpacing\n                labelAnchor = 'end'\n            }\n            break\n\n        case 'top-to-bottom':\n            symbolX = (width - symbolSize) / 2\n            symbolY = 0\n\n            labelX = width / 2\n\n            labelAnchor = 'middle'\n            if (justify === true) {\n                labelY = height\n                labelAlignment = 'alphabetic'\n            } else {\n                labelY = symbolSize + symbolSpacing\n                labelAlignment = 'text-before-edge'\n            }\n            break\n\n        case 'bottom-to-top':\n            symbolX = (width - symbolSize) / 2\n            symbolY = height - symbolSize\n\n            labelX = width / 2\n            labelAnchor = 'middle'\n            if (justify === true) {\n                labelY = 0\n                labelAlignment = 'text-before-edge'\n            } else {\n                labelY = height - symbolSize - symbolSpacing\n                labelAlignment = 'alphabetic'\n            }\n            break\n    }\n\n    return {\n        symbolX,\n        symbolY,\n\n        labelX,\n        labelY,\n        labelAnchor,\n        labelAlignment,\n    }\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { computeDimensions, computePositionFromAnchor, computeItemLayout } from './compute'\nimport { LegendCanvasProps } from './types'\n\nconst textAlignMapping = {\n    start: 'left',\n    middle: 'center',\n    end: 'right',\n} as const\n\nexport const renderLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        data,\n\n        containerWidth,\n        containerHeight,\n        translateX = 0,\n        translateY = 0,\n        anchor,\n        direction,\n        padding: _padding = 0,\n        justify = false,\n\n        // items\n        itemsSpacing = 0,\n        itemWidth,\n        itemHeight,\n        itemDirection = 'left-to-right',\n        itemTextColor,\n\n        // symbol\n        symbolSize = 16,\n        symbolSpacing = 8,\n        // @todo add support for shapes\n        // symbolShape = LegendSvgItem.defaultProps.symbolShape,\n\n        theme,\n    }: LegendCanvasProps\n) => {\n    const { width, height, padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.font = `${theme.legends.text.fontSize}px ${theme.legends.text.fontFamily || 'sans-serif'}`\n\n    data.forEach((d, i) => {\n        const itemX = i * xStep + padding.left\n        const itemY = i * yStep + padding.top\n\n        const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout(\n            {\n                direction: itemDirection,\n                justify,\n                symbolSize,\n                symbolSpacing,\n                width: itemWidth,\n                height: itemHeight,\n            }\n        )\n\n        ctx.fillStyle = d.color ?? 'black'\n        ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize)\n\n        ctx.textAlign = textAlignMapping[labelAnchor]\n\n        if (labelAlignment === 'central') {\n            ctx.textBaseline = 'middle'\n        }\n\n        ctx.fillStyle = itemTextColor ?? theme.legends.text.fill ?? 'black'\n        ctx.fillText(String(d.label), itemX + labelX, itemY + labelY)\n    })\n\n    ctx.restore()\n}\n","import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n        if (reverse === true) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse])\n}\n","import PropTypes from 'prop-types'\n\n/**\n * The prop type is exported as a simple object instead of `PropTypes.shape`\n * to be able to add extra properties.\n *\n * @example\n * ```javascript\n * import { LegendPropShape } from '@nivo/legends'\n *\n * const customLegendPropType = PropTypes.shape({\n *     ...LegendPropShape,\n *     extra: PropTypes.any.isRequired,\n * })\n * ```\n */\nexport const LegendPropShape = {\n    data: PropTypes.arrayOf(PropTypes.object),\n\n    // position & layout\n    anchor: PropTypes.oneOf([\n        'top',\n        'top-right',\n        'right',\n        'bottom-right',\n        'bottom',\n        'bottom-left',\n        'left',\n        'top-left',\n        'center',\n    ]).isRequired,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    direction: PropTypes.oneOf(['row', 'column']).isRequired,\n\n    // item\n    itemsSpacing: PropTypes.number,\n    itemWidth: PropTypes.number.isRequired,\n    itemHeight: PropTypes.number.isRequired,\n    itemDirection: PropTypes.oneOf([\n        'left-to-right',\n        'right-to-left',\n        'top-to-bottom',\n        'bottom-to-top',\n    ]),\n    itemTextColor: PropTypes.string,\n    itemBackground: PropTypes.string,\n    itemOpacity: PropTypes.number,\n\n    symbolShape: PropTypes.oneOfType([\n        PropTypes.oneOf(['circle', 'diamond', 'square', 'triangle']),\n        PropTypes.func,\n    ]),\n    symbolSize: PropTypes.number,\n    symbolSpacing: PropTypes.number,\n    symbolBorderWidth: PropTypes.number,\n    symbolBorderColor: PropTypes.string,\n\n    onClick: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n\n    effects: PropTypes.arrayOf(\n        PropTypes.shape({\n            on: PropTypes.oneOfType([PropTypes.oneOf(['hover'])]).isRequired,\n            style: PropTypes.shape({\n                itemTextColor: PropTypes.string,\n                itemBackground: PropTypes.string,\n                itemOpacity: PropTypes.number,\n                symbolSize: PropTypes.number,\n                symbolBorderWidth: PropTypes.number,\n                symbolBorderColor: PropTypes.string,\n            }).isRequired,\n        })\n    ),\n}\n"],"names":["SymbolCircle","x","y","size","fill","opacity","borderWidth","borderColor","_jsx","r","cx","cy","strokeWidth","stroke","style","pointerEvents","SymbolDiamond","transform","d","SymbolSquare","width","height","SymbolTriangle","zeroPadding","top","right","bottom","left","computeDimensions","item","direction","itemsSpacing","_padding","padding","itemCount","itemWidth","itemHeight","Array","isArray","Error","horizontalPadding","verticalPadding","spacing","computePositionFromAnchor","anchor","translateX","translateY","containerWidth","containerHeight","computeItemLayout","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","justify","symbolSize","symbolSpacing","symbolByShape","circle","diamond","square","triangle","LegendSvgItem","data","textColor","background","symbolShape","symbolBorderWidth","symbolBorderColor","onClick","onMouseEnter","onMouseLeave","toggleSerie","effects","useState","setStyle","theme","useTheme","handleMouseEnter","useCallback","event","filter","on","reduce","acc","effect","handleMouseLeave","isInteractive","some","handler","undefined","SymbolShape","_jsxs","itemOpacity","itemBackground","cursor","id","React","createElement","color","hidden","legends","symbol","textAnchor","text","itemTextColor","dominantBaseline","userSelect","label","LegendSvg","itemDirection","length","xStep","yStep","map","i","BoxLegendSvg","textAlignMapping","start","middle","end","renderLegendToCanvas","ctx","save","translate","font","fontSize","fontFamily","forEach","itemX","itemY","fillStyle","fillRect","textAlign","textBaseline","fillText","String","restore","useQuantizeColorScaleLegendData","scale","overriddenDomain","domain","reverse","valueFormat","v","separator","useMemo","items","range","domainValue","index","invertExtent","extent","value","LegendPropShape","PropTypes","arrayOf","object","oneOf","isRequired","number","string","oneOfType","func","shape"],"mappings":"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"}